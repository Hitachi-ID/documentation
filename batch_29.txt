The loadbalancerstatus.exe  utility  adds an API at http://<domainname>/<ins t ance>/ api/
nodes t a tus  that runs all c on figur ed  tests when called and provides either an HTTP OK 200  response if
all c on figur ed  tests passed, or HTTP Service Unavailable 503  if any test failed.
The list of tests to run is c on figur ed  via nodestat.cfg , located at <Program Files path>\Bravura Security
\Bravura Security Fabric\<instance>\ p sc on fig.  Most tests are enabled by default, and can be enabled or
disabled individually by marking the item as a comment.
Bravura Security Fabric  also monitors the performance of Internet In f ormation  Services (IIS). When a
request takes longer than a threshold, it may mean that IIS has timed  out w aiting  for result and returned
an error to the caller. If this happens a lot, that means this server is overloaded. API nodestatus will
return 503 and this server will be taken out of the load balancer.
Timeout threshold is de fined  by a DWORD key in ajaxsvc registry: timeout_threshold_ms .
ajax_max_timeouts  and ajax_timeout_minutes  are de fined  in nodestat.cfg . These let
you c on figur e  how many timeouts  in the last certain number of minutes are allowed before nodestat
starts complaining.
Variable Description
$Services A group of tests that c on firm  that the given service is
running. Note that iddb and ajaxsvc must be
running for any node status test to succeed.
▪iddb▪
▪ajaxsvc▪
▪idarch▪
▪idwfm▪
▪idpm▪
▪msgsvc▪
Disk Returns success if the node’s r eplic ation  queues have not
hit the high water mark.
Ping Calls the ping stored procedure to c on firm  that the
database can be contacted.
db_commit_suspend Returns success unless this node has suspended database
commit oper ations,  which typically occur during
r es ynchr oniz ation  or when a r eplic ation  queue has
become full.
Record = nodestat.db Enables recording test results to a database flatfile,  and
de fines  the name of that file. This database is
aut omatic ally  written  to the <instance>\db\nodestatus
directory.
aja x_ma x_timeouts  = 10 Number of ajax timeouts  to watch for
aja x_timeout_minut es  = 5 How many minutes to observe ajax timeouts  inVariable Description
Plugin = "loadbalancerstatus.py" Calls the plugin located at <instance>\plugin to evaluate
this node’s status. Returns success if the plugin succeeds.
Con figuring  file s ynchr oniz ation
Each Bravura Security Fabric  instance can synchronize the files they use; for example, scripts, connectors,
and plugin programs. File s ynchr oniz ation  is controlled by the File R eplic ation  Service ( idfilerep )
running on each server, and the process is activ a t ed  by the updinst program. The updinst program
is run during auto discovery when the Manage the system  > Maintenance > Options  >PSUPDATE FILE
REPLICATION  setting  is enabled. This is the default setting.
The File R eplic ation  Service ( idfilerep ) archives e xisting  files before o v er writing  them. By default, the
archived files are stored in the Logs directory for the instance ( <Program Files path>\Bravura Security\Bravura
Security Fabric\Logs\<instance> ). You can change the archive directory by using the Manage the system  >
Maintenance > Options  > FILE REPLICATION ARCHIVE DIR  setting.  This directory will be aut omatic ally
created on the other instances during file r eplic ation  if it does not already exist.
The Manage the system  >Maintenance > Options  > FILE REPLICATION TIMEOUT  setting  is used to specify
a timeout  value (in seconds) before the File R eplic ation  Service disconnects. The default value is 300
seconds. This timeout  only applies if servers lose their c onnection  while backing up or deleting  files;  an
error occurs immediately if the servers are unable to maintain a c onnection  while r eplic ating  files.
To manually perform file s ynchr oniz ation:
1.Click Manage the system  > Maintenance > File s ynchr oniz ation . 1.
2.Select all file r eplic ation  servers that you want to synchronize. You can choose file r eplic ation  servers 2.
and proxy servers.
3.Click Synchronize . 3.
If any nodes are missing from the File s ynchroniz ation  page ( Manage the system  > Maintenance > File
s ynchr oniz ation ), verify that the missing nodes have network c onnectivity ,  then restart their File
R eplic ation  Services. Reload the File s ynchroniz ation  page. The missing nodes should be displayed after
r es t arting  their File R eplic ation  Services.
To determine which files and registry settings  updinst  replicates, there are whitelists and blacklists that
specify what data to include and what data to omit in the context of file/r egis tr y  r eplic ation  You can write
an updinst.cfg file to provide additional  c on figur ation.
A sample of updinst.cfg is located in the samples directory. This c on figur ation  file must be placed in
the \<instance> \ p sc on fig \ directory before it can be used by the File R eplic ation  Service. Use this
c on figur ation  file to control which files and registry settings  are replicated to other instances (whitelist)
and which are not replicated (blacklist). The whitelist settings  override blacklist settings.
All file and c onfiguration  modific ations  should be done on the same server (the primary). When
attempting  to run updinst from a node other than the primary, an error will occur, and the operation
will be aborted. In extreme circumstances there is an option  to force external data store replic ation  (-extdb -forcerun) from a secondary node; however that should be done only when that database was
corrupted on the primary (and its backups that are created every time  the external data store is updated,
were also corrupted) but the database, or a backup, survived on a secondary node. If updinst is run
from more than one server, or if file or registry changes are made on secondary nodes, it is possible for it
to overwrite newer files or settings  that exist on secondary nodes. If a server with missing files runs
updinst , that will remove those same files on all other instances.
Do not attemp t  to replace Database Service ( iddb ) files using updinst or the File R eplic ation  Service.
Updating  the Database Service and related files (such as iddbmssql.dll) must be done manually on all
instances. This only applies to the Database Service service. All other services can be updated using the
File R eplic ation  Service. To update the Database Service files manually, shut down all services on the
instance, back up all services, and then replace the Database Service files.
Sending an alt ernativ e  address
If the server on which you are running the File R eplic ation  Service cannot access the other r eplic ation
servers using the hostname (that is, database r eplic ation  has to use the node’s IP address to connect with
other nodes), you can set the "serveraddress" string value in the instance’s registry to broadcast the
node’s IP address to other r eplic ation  nodes. This address can be used to set the file r eplic ation
in f ormation.   
See also:
File R eplic ation  Service  (on page 2862)
Command options  and examples for updinst
The updinst program synchronizes files and registry settings  between servers in a multiple-ins t ance
environment, or a r eplic ation  environment. The program is run during auto discovery when the
Maintenance > Options  > PSUPDATE FILE REPLICATION  setting  is enabled. This is the default setting.
This program also collects and synchronizes proxy log files onto the instance server.
This program is used in c onjunction  with the File R eplic ation  Service ( idfilerep ).
To determine which files and registry settings  updinst  replicates, there are whitelists and blacklists that
specify what data to include and what data to omit in the context of file/r egis tr y  r eplic ation  You can write
an updinst.cfg file to provide additional  c on figur ation.
A sample of updinst.cfg is located in the samples directory. This c on figur ation  file must be placed in
the \<instance> \ p sc on fig \ directory before it can be used by the File R eplic ation  Service. Use this
c on figur ation  file to control which files and registry settings  are replicated to other instances (whitelist)
and which are not replicated (blacklist). The whitelist settings  override blacklist settings.
All file and c onfiguration  modific ations  should be done on the same server (the primary). When
attempting  to run updinst from a node other than the primary, an error will occur, and the operation
will be aborted. In extreme circumstances there is an option  to force external data store replic ation  (-
extdb -forcerun) from a secondary node; however that should be done only when that database was
corrupted on the primary (and its backups that are created every time  the external data store is updated,were also corrupted) but the database, or a backup, survived on a secondary node. If updinst is run
from more than one server, or if file or registry changes are made on secondary nodes, it is possible for it
to overwrite newer files or settings  that exist on secondary nodes. If a server with missing files runs
updinst , that will remove those same files on all other instances.
Do not attemp t  to replace Database Service ( iddb ) files using updinst or the File R eplic ation  Service.
Updating  the Database Service and related files (such as iddbmssql.dll) must be done manually on all
instances. This only applies to the Database Service service. All other services can be updated using the
File R eplic ation  Service. To update the Database Service files manually, shut down all services on the
instance, back up all services, and then replace the Database Service files.
If a problem occurs during file r eplic ation  then a notific ation  email is sent to the administrator, and the
FILE REPLICATION FAILURE event is triggered.
Usage
updinst.exe [-list] | [-showconfig] |
  [-synchfile] [-syncreg] [-globalcp] [-serverid <serverid>...] [-dry-
run] |
[-extdb[-forcerun]] | [-getlogs] [-proxyfile <proxylist.csv>] [-
removelogs]
Argument Description
-dry-run Only show what would be done without making changes.
-getlogs Retrieve and synchronize all logs from all proxies
c on figur ed  onto the instance server. Logs will be under
their r espectiv e  \Logs\proxy_<proxy_IP> directory.
-globalcp Synchronize the global connector pack in addition  to the
current instance. Used in c onjunction  with the -s yncfile
argument.
-list List file r eplic ation  services involved and exit. Display the
status of each service, node ID, address, and port. If the
service is unreachable, check the c onnection  of the
Database Service for each server.
-pr o xy file  <proxylist.csv> Retrieve and synchronize all logs from proxies listed in
the \<ins t ance>\p sc on fig\pr o xylis t.cs v  file. Logs will be
under their r espectiv e  \Logs\proxy_>proxy_IP< directory.
Where proxylist.csv contains a list of proxy IP addresses
and their ports.
This is only used in c onjunction  with -getlogs.
-serverid <serverid> … Synchronize to specified  servers; can be used with
multiple  server IDs. The server ID can be found using the
-list argument. If no server is specified,  all servers are
updated.
-sho w c on fig Show built-in c on figur ation  and exit.
-s yncfile Synchronize files to other servers.Argument Description
-syncreg Synchronize registry settings  to other servers.
-extdb Synchronize the extdb tables.
-forcerun Forces the current node to synchronize the extdb tables.
-removelogs Remove all previously fetched logs from all proxies. Can
be used in c onjunction  with -getlogs to remove logs that
no longer exist on the remote server.
- filedir  <filedir> Specific  file path from which files are synchronized to
other servers. This is the r elativ e  path under the
instance’s main file folder.
-registrydir <registrydir> Specific  registry path from which settings  are
synchronized to other servers. This is the r elativ e  path
under the instance’s main registry folder.
Examples
1.To show the default c on figur ation  file: 1.
updinst -showconfig
2.To show a list of all file r eplic ation  services that are running: 2.
updinst -list
3.To synchronize all files and registry settings  on all servers: 3.
updinst -syncfile -syncreg
4.To synchronize a specific  file directory on all servers: 4.
updinst -syncfile -filedir <filedir>
5.To synchronize multiple  file directories on all servers: 5.
updinst -syncfile -filedir <filedir1> -filedir <filedir2> ...
6.To synchronize a specific  registry setting  on all servers: 6.
updinst -syncreg -registrydir <registrydir>
7.To run a dry-run on a specific  server: 7.
updinst -serverid <server id (guid)> -syncfile -syncreg
8.To update global Connector Pack files: 8.
updinst.exe -globalcp -syncfile
9.To collect and synchronize logs from all proxies:9.
updinst.exe -getlogs
10. To collect and synchronize logs from all proxies listed in the proxylist file: 10.
updinst.exe -getlogs -proxyfile <proxylist.csv>
Where the proxylist.csv contains:
::proxy, port:: 
10.0.39.111, 3344 
10.0.39.121, 334411. To synchronize the extdb tables: 11.
updinst.exe -extdb
12. To remove all previously fetched logs: 12.
updinst.exe -removelogs
13. To remove logs that no longer exist on the remote server: 13.
updinst.exe -removelogs -getlogs
Update updinst c onfig  file
In the updinst c on fig  file, all file paths are rooted at the backslash immediately after  the
instance_name directory.
Each item in the lists contained in the file is a regular expression (regex).
While the sample .cfg file contains some entries from the default values built into the updinst binary
(for regex illus tr ation  purposes), it's recommended that the cfg file actually used contain only new/
custom values, which do not show up in the four lists when checking the c on figur ation  with no
updinst.cfg  file in the p sc on fig  directory (it saves on comparisons, and the instance contains a lot of
files and directories to compare with each declared regex string).
If the file to add an e x ception  for is script\somefile.py , the most precise regex expression for it is:
^\\\\script\\\\somefile.py$
The s t arting  ^ represents the beginning of the string, so it would not match, for example, \samples
\script\somefile.py.
Similarly, the trailing $ represents the end of the string, so it won't match, for example, an extension
like .pyg
To exclude a whole directory, you can leave the $ off and the expression will match everything in that
directory: files and other directories with their files.  This default option  for example matches all auto-
discovered target list files:
psconfig\\\\discovered
Each backslash is escaped with a backslash, so \ becomes \\, and since that is itself inside of a KVG
string, \\ becomes \\\\  (\s would simply escape the s).
Below is an example that adds blacklisted registry entries and file entries (meaning that they will not be
sent from the primary to secondary applic ation  nodes).
# KVGROUP-V2.0  
"updinst" "cfg" = {  
}  
# Registry path blacklist.  Registry paths that match the regular  
# expressions here are not considered for replication, unless they  
# appear in regWhitelist.  All paths are relative to the instance  # registry root.  Registry keys (and value names) are separated by  
# double-escaped backslashes (\\\\).
 "regBlacklist" = { "^IDAPISOAP\\\\endpoints",  
                     "SENDER_EMAIL",  
                     "ServerAddress" };
# File path blacklist. Filesystem paths that match the regular
# expressions here are not considered for propagation, unless they
# appear in regWhitelist (see above). All paths are relative to the
# instance root directory. Directories and files are separated
# by double-escaped backslashes (\\\\).
"fileBlacklist" = { "^\\\\psconfig\\\\.*\\.db$";
"plugin\\\\debug\\\\.*";
"design\\\\src\\\\ui.build\\\\.*";
"design\\\\src\\\\ui\\\\node_modules\\\\.*"
};
}
In the above:
▪ Blacklisting  these entries ensures that the SENDER_EMAIL  and ServerAddres s are not ▪
propagated from the primary to the secondaries. These two entries will be unique to each server.
▪SENDER_EMAIL  system variable, so that each node can be given a separate "From:" field  in ▪
outgoing emails, to be able to quickly distinguish  what node originates what email.
▪ServerAddres s bypasses the aut omatic  computer-name de t ection  on each node (for example, ▪
when iddb detects only the hostname in a node whose OS is not joined to a domain, and Bravura
Privilege needs to register FQDNs instead - so that link passing between nodes, as in downloading
recording archives, can succeed the TLS check in IIS)
▪The entry blacklisting  the IDAPISOAP\endpoints  registry key exists by default in the ▪
c on figur ation  file, in case each node has to provide diff er en t  SOAP endpoints (directly to the
hostname, or for zoning purposes).
▪Most registry changes are system variables listed in the registry section  at Manage the system ▪
>Maintenance > System variables .
▪psconfig\*\*.db  is where Bravura Privilege keeps list files from discovered systems in 12.0.0+: by ▪
default, those files are useful only on the primary node and sending them to replica nodes is a waste
of resources, especially at the end of each Auto discovery.
▪For the same reason, check the output of updinst -showconfig  to make sure that the ▪
psconfig\*.db  files are also blacklisted (and if not, add a blacklist rule for ^psconfig\\\
\*.db )
▪Filtering the logs for psupdate or updinst dur ations  can suggest what other large files can be ▪
excluded from auto discovery if they take too long.
▪plugin\debug \ is where (mostly c omponentiz ed)  Python scripts using IDMLib-based logging place ▪
their input/output KVGs and like other log files,  those are usually not needed on secondaries from the
primary.▪design\src\  files should never change after  patching. They are Angular app requirements and ▪
there is no need for them to be propagated to secondary servers, let alone proxies.
▪Whitelists trump blacklists. This means if the same item is matched both by a blacklist regex and a▪
whitelist one, the whitelist wins and the item is propagated.
▪If an entry is not blacklisted (or if it was by default blacklisted, but is modified  with a whitelist entry): ▪
▪It copies any files changed on the primary inside the instance folder and subfolders, and it ▪
overwrites any changes. In other words, it deletes any new files created on the secondary nodes
and if files are modified  on secondaries, the changes are reverted and not backed up.
▪It copies any registry changes made on the primary node and overwrites any changes on the▪
secondary nodes (removes them if they were not on the primary).
▪The main Bravura Security Fabric  installer only installs/checks for the 64-bit VC++ redistributables. The ▪
Connector Pack MSI will install/check for both 32-bit and 64-bit, so do not depend on file pr opag ation
to copy all the connector pack files over to other nodes and proxies.
Modifying node settings
To modify a node:
1.Click Manage the system > Maintenance > Database r eplic ation . 1.
2.Select 
  a node. 2.
3.Select the Con figur ation  tab. 3.
4.Modify the node’s settings. 4.
You can change the:
▪ Description▪
▪External address▪
Any URLs returned to client w ork s t ations  can use a separate, externally addressable name, such as
when downloading packages from session monitor or redeeming one-time  use tokens. This address
can only be modified  for the r eplic ation  node it is accessed from, otherwise the option  will be
disabled.
▪Mode▪
▪Queue size limit▪
If the r eplic ation  is suspended on a node, then changes made on other r eplic ation  nodes will not
be propagated to this node.
Do not make any changes to a replic ation  node while it is suspended.
5.Click Update 5.
If the External addres s is modified,  the Database Service needs to be restarted in order for the changes
to take e ff ect.
To delete a node, check the box next to the node on the Database replic ation  page, then click Delete . You
can also delete the node from its in f ormation  page.If the current node’s server clock is diff er en t  from that local node’s clock by 60 seconds, a warning
message is displayed, noting  the time  diff er ence.
Propagate r eplic ation  changes
Once you have modified  the c on figur ation  of a node in a r eplic ation  environment, you must propagate
the node c on figur ation  to all connected servers. The status for the nodes will change to "Reload
required" on the Select a replic ation  node  page.
To do this:
1.Ensure all nodes can successfully communicate with each other. When pr opag ating  changes, the 1.
system checks that all nodes can connect, and if any c onnection  issues are detected, pr opag ation  will
fail.
2.If adding a new database node, verify there is enough space available on:2.
▪The source applic ation  node (the one from whose web-based interface the pr opag ation  is ▪
triggered)
▪The target nodes (the ones where the pr opag ation  goes) ▪
▪Their r espectiv e  backend databases. ▪
3.Click Propagate and reload r eplic ation  c on figur ation  on all servers  on the Database replic ation  page. 3.
This propagates the changes. When a new node is added the entir e  database will be replicated to the
new node.
4.Wait while the Database Services reload the changes and possibly builds queue files. 4.
Click Refresh 
  to check progress, as indicated in the status column.
If a node is in "Reload in progress" status, or is running auto discovery, you cannot make any changes
to the replic ation  nodes until  the reload is complete.
The Propagate and reload replic ation  c onfiguration  on all servers only appears if a change in the
c onfiguration  has occurred.
Con figuring  r eplic ation  event actions
R eplic ation-r ela t ed  events can trigger external notific ation  programs.  (on page 1524)
The following database r eplic ation  options  can be accessed by na vig ating  to Manage the system  >
Maintenance > System variables  or Manage the system > Maintenance > Options :
Database r eplic ation  events that launch interface programs
Option Description
DB COMMIT RESUME Database commits have been resumed on this node after  a DB
COMMIT SUSPEND event. Either the queue limit has been
adjusted, space has been freed on the disk, or activity  on the
server has slowed to allow the queue to flush.
This event is pr ec on figur ed  to run pxnull with the
c on figur ation  file pxnull-replication.cfg.Option Description
DBbCOMMITbSUSPEND A server has failed to send data to another server too many
times,  causing the send queue to be full. Database commits
have been suspended on this node.
This event is pr ec on figur ed  to run pxnull with the
c on figur ation  file pxnull-replication.cfg .
DB FAILED PROC RECORDED A server has failed to insert data into the sending queue, or
has failed to run procedures from the receive queue during
r eplic ation.
This event is pr ec on figur ed  to run pxnull with the
c on figur ation  file pxnull-replication.cfg .
DB QUEUE INSERT FAILURE Data could not be inserted into the send queue or receive
queue of a remote r eplic ation  node.
This event is pr ec on figur ed  to run pxnull with the
c on figur ation  file pxnull-replication.cfg .
DB REPLICATION CONN FAILURE A local r eplic ation  node lost c onnectivity  to a remote server
during a periodic check of availability. The system retries
c onnecting  to the disconnected node once every 30 seconds.
This exit trap will run once every 10 minutes.
This event is pr ec on figur ed  to run pxnull with the
c on figur ation  file pxnull-replication.cfg .
DB REPLICATION CONN RESTORED A r eplic ation  node successfully connects to a remote server
that it had previously failed to contact.
This event is pr ec on figur ed  to run pxnull with the
c on figur ation  file pxnull-replication.cfg .
DB REPLICATION TRANS FAILURE The database service on a r eplic ation  node failed to transmit
data to a connected remote node. The transmission will be
retried.
This event is pr ec on figur ed  to run pxnull with the
c on figur ation  file pxnull-replication.cfg .
DB REPLICATION QUEUE DELAY PAST
THRESHOLDThe queue delay of receive queues is larger than the value of
DB REPLICATION QUEUE DELAY THRESHOLD.
DB REPLICATION WATERMARK
WARNThe amount of data in a r eplic ation  queue (to the local
database or associated with a remote node) has passed a
threshold. The threshold is set by Warn when percentage of
maximum queue size used is, in terms of percent of disk or
MB, on the Manage the system > Maintenance > Database
r eplic ation  menu.
This event is pr ec on figur ed  to run pxnull with the
c on figur ation  file p xnull-r eplic ation.cf g.