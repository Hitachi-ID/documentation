Value: "kvgroup" Description:  Address attribut e  type.
▪$KeyManagedGroup▪
Value: "managedGroup" Description:
▪$KeyModelUID▪
Value: "modeluid" Description:  Account to use as a template when cr eating  a new user.
▪$KeyNewPW▪
Value: "newpw" Description:  Password for the new account or the new password when r esetting  an
e xisting  account.
▪$KeyNoPTY▪
Value: "nopty" Description:
▪$KeyOldPW▪
Value: "oldpw" Description:  Current password for an account.
▪ $K e yOper ation▪
Value: "oper ation"  Description:  The action  that is currently underway.
▪$KeyPort▪
Value: "port" Description:  IP port to connect to on the target.
▪ $K e yP osition▪
Value: "position"  Description:
▪$KeyReadOnly▪
Value: "readonly" Description:  Address attribut e  that is not modifiable  by the user.
▪$KeyResource▪
Value: "resource" Description:
▪$KeyResourceAddress▪
Value: "resourceaddress" Description:
▪$KeyResourceType▪
Value: "resourcetype" Description:
▪$KeyRestricted▪
Value: "restricted" Description:  Address attribut e  type of restricted values.
▪$KeyRestrictedValue▪
Value: "restrictedvalue" Description:  Key for the chosen restricted address attribut e  value.
▪$KeyRestrictedValueText▪
Value: "restrictedvaluetext" Description:  Display value for a restricted address attribut e  value.
▪$KeyRestart▪
Value: "restart" Description:
▪$KeyRevision▪
Value: "rev" Description:
▪$KeyScript▪Value: "script" Description:  Address attribut e  type.
▪$KeyFile▪
Value: "file"  Description:  Address attribut e  type.
▪$KeyDir▪
Value: "dir" Description:  Address attribut e  type.
▪$KeyPath▪
Value: "path" Description:  Address attribut e  type.
▪$KeyServer▪
Value: "server" Description:  Address attribut e  containing the target to connect to.
▪$KeyServerInfo▪
Value: "serverinfo" Description:  Oper ation  to query the target for version and status in f ormation.
▪ $K e ySettings▪
Value: "settings"  Description:
▪$KeyShortID▪
Value: "shortid"  Description:  User’s ID
▪$KeySSL▪
Value: "SSL" Description:  Address attribut e  determining if encrypted telnet should be used.
▪$KeyString▪
Value: "string" Description:
▪$KeySysID▪
Value: "sysID" Description:  Username for secondary login to the target (e.g. sudo).
▪$KeySysPassword▪
Value: "syspassword" Description:  Password for the secondary login to the target.
▪$KeyTerm▪
Value: "terminal" Description:  Address attribut e  determining the terminal type for the telnet
c onnection.
▪$KeyTimeout▪
Value: "timeout"  Description:  Address attribut e  de fining  how long the agent should wait for
c onnection  to complete.
▪$KeyTrue▪
Value: "true" Description:  String used for boolean address and account attribut es.
▪ $K e yW rit eOption▪
Value: "writ eoption"  Description:  Address attribut e  determining the terminal type for the telnet
c onnection.
Live debuggingYou can use the termdebug KVGroup to in t er activ ely  monitor what is sent and received by agent scripts
over raw TCP c onnections,  SSL raw c onnections  (not http/http s),  telnet and SSH c onnections.  To do this,
add a supplemental termdebug KVGroup to the agent input. For example:
# KVGROUP-V1.0
"" "" = {
  "address" = "telnet_unix.psl"
  "adminid" = "root"
  "adminpw" = "<encrypted password value>"
  "hostid" = "SSH1"
  "listfilename" = "C:\\listing-test.txt"
  "instance" = "globoco"
  "listresource" "" = {
  }
  "operation" = "list"
  "timeout" = "30"
     "termdebug" "" = {
       ## mandatory configurations
         "address" = "127.0.0.1"
          #String representation of the
          #address of the interface to listen to.
         "port" = "3210"
          #string representation of the TCP port to listen to.
          #agtssh listens to this port on IDM Suite server
         "command" = "c:\\windows\\system32\\telnet.exe localhost 3210"
          #Command line to run with full executable path and parameters
          #Quotes and backslashes need to be escaped with \.
          #See below for more info.
       ## optional configurations
         "interactive" = "1"
           #0=no 1=yes
           #If 1, shows a dialog box with the string to
           # be sent, and waits for OK before it is sent.
         "waitforjointimeout" = "10000"
           #Timeout, in milliseconds, of the agent waiting
           # for a client connection.
         "sendtimeout" = "1000"
           #Timeout, in milliseconds, of sending data back to the
           # client.
       }
}Data seen on the debug port is raw decrypted data.
Command options
The command value can take Cygwin telnet.exe, or nc.exe, or a tn3270/tn5250 client as required, for
example:
 "command" = "c:\\cywgin\\bin\\bash -c \"/bin/telnet.exe localhost 3210 | tee /tmp/
log1; sleep 3600\""
To prevent the window closing after  the debug port closes, include cmd.exe /k telnet ...  for
telnet, or sleep for Cygwin telnet.exe or nc.exe.
For non-in t er activ e  debugging, the command can be something like:
 "command" = "c:\\windows\\system32\\cmd.exe /c telnet localhost 3210 >> c:\\debuglog.txt 2>&1"
In t er activity  options
When in t er activity  is turned on ("in t er activ e"  = "1" ) the script waits for one of the following inputs
before proceeding:
ok = next step
cancel = skip next questions,  run all steps aut omatic ally  without any more pr ompting
If the original agent script or the target itself has very strict timeouts,  it is recommended that you do not
use the in t er activ e  option,  or cancel it before the section  with critic al  timing.
Adding the termdebug KVGroup to input
You can add the termdebug KVGroup to the agent input by:
▪Capturing agent input using the pstee program, then manually adding the inner KVGroup.▪
▪Wrapping the actual agent in an agtdos script as described in the PSLang Manual ( pslang.pdf ) . ▪
The script should:
1.Read $_inVars1.
2.Replace its address ( "address" = "doswrapper.psl" ) with the telnet or ssh address line, 2.
then add the termdebug KVGroup
3.Call the original agent with this group (converted to string) as input. It could also log the new modified 3.
agent input for debugging the PSLang wrapper script.
This method is more complicated, but has the advantage of working for every agent call and not
replaying oper ations.See  the PSLang Manual ( pslang.pdf ) for more in f ormation  about KVGroup functions,
and system() calls.
Sanitizing  input variables and recommended ID filt er s
Since the inputs into the agttelnet , agtssh and agtdos scripted connectors can come from
untrusted external sources, Bravura Security  recommends putting  in safe guards to mitig a t e  the risk ofinjection  attack s.  The script writer should take extra care to both filt er  out pot entially  nefarious user IDs
as well as properly escaping input variables before passing them to shell commands.
Characters such as:
   ;&|<>'"()*#
should be looked for in user IDs and filt er ed  out during listing  so they don’t even make it to the Bravura
Security Fabric  system. In addition  (or if these characters are required), the SSH script should ensure that
they are properly escaped before passing them into the shell. This will avoid injection  attack s  which could
compromise your system.
criteria. The default listing  behavior lists all users and every single user is tested for membership. This
may be cumbersome and unnecessary, and a listing  expression may be more e fficien t.
For example:
"Is <User> a manager of JohnB?” This PSLang
PSLang scripts are broken down into functions.  Each function  must include a name, function  parameters
(if applicable), and a sequence of statements to execute:
 function <FunctionName>( <p1>, <p2>, … )
   {
   <statement>
   <statement>
   …
   }
The scripts can contain a mix of user -de fined  functions , and built-in functions  which are used to pass
in f ormation  to the agent.
Remember to remove all debugging statements and to review all statements that will create logs before
using the script in a production  environment. Ensure that no sensitive  inf ormation  is being captured in the
logs.
User -de fined  functions
In order for agtdos , agttelnet , or agtssh to perform an agent oper ation,  you must implement
the corresponding function  in your script. Write these functions  to provide in t er action  details between
Bravura Security Fabric  and the target.
The agents use the following functions:
▪list( const $wantGroups, const $wantAttributes )  Lists accounts on the target ▪
system, and the attribut es  for each account.
The parameters passed to the function  are as follows:
▪$wantGroups  – determines if this function  should retrieve group membership. ▪
If the value of $wantGroups  is a non-zero value, write your function  to retrieve the group(s) to
which each account belongs while listing  accounts.▪$wantAttributes – determines if this function  should retrieve attribut es  for each account. ▪
If the value of $wantAttributes  is a non-zero value, write your function  to list the attribut es
for each account.
If both $wantGroups  and $wantAttributes  are 0, write your function  to list accounts on
the target system only.
See listmembermethod below for more in f ormation  about listing  group membership.
▪listgroups( const $wantMembers )  Lists groups. ▪
The parameters passed to the function  are as follows:
▪$wantMembers – determines if this function  should retrieve group membership. ▪
If the value of $wantMembers  is non-zero, write your function  to retrieve the account(s) that
belong to each group while listing  groups.
If this value of $wantMembers  is 0, write your function  to list groups only.
See listmembermethod  below for more in f ormation  about listing  group membership.
▪listresource( const $resourceType )  Lists resources for Bravura Privilege ’s ▪
infrastructure auto discovery feature. The parameters passed to the function  are as follows:
▪$resourceType  de fines  which type of resource to list. ▪
Depending on target system c on figur ation,  listresource() will be called multiple  times  each with a
diff er en t  resourceType value. The values that resourceType can take on are:
▪ls_compwkstn – list w ork s t ation  computer objects. ▪
▪ls_compsvr – list server computer objects. ▪
▪ls_admmember – list members of adminis tr ativ e  groups. ▪
▪ls_taskacct – list scheduled task accounts. ▪
▪ls_comacct  – list COM object accounts. ▪
▪ls_iisacct  – list IIS virtual directory accounts. ▪
▪ls_scmacct  – list Service Control Manager accounts. ▪
▪movecontext( const $info )  Moves an account to a new context or loc ation  on a c on t e x t - ▪
sensitiv e  target. Supported in Bravura Identity  and Bravura Privilege .
▪isenabled( const $info ) Checks if an account is enabled. Supported in Bravura Pass  and ▪
Bravura Privilege .
▪islocked( const $info )  Checks if an account is locked. Supported in Bravura Pass  and ▪
Bravura Privilege .
▪ispwexpired( const $info )  Checks if an account’s password is expired. Supported in ▪
Bravura Pass  and Bravura Privilege .
▪isacctexpired( const $info )  Checks if an account is expired. Supported in Bravura Pass ▪
and Bravura Privilege .
▪disable( const $info )  Disables an account. Supported in Bravura Identity  and Bravura ▪
Privilege .
Most systems diff er entia t e  between disabled and intruder-locked accounts.▪enable( const $info )  Enables an account. Supported in Bravura Identity  and Bravura ▪
Privilege .
▪lock( const $info )  Locks an account (sets the intruder lockout). Supported in Bravura Pass ▪
and Bravura Privilege .
Most system diff er entia t e  between intruder-locked and disabled accounts.
▪unlock( const $info )  Unlocks an account (clears the intruder lockout). Supported in Bravura ▪
Pass  and Bravura Privilege .
▪expirepw( const $info )  Expires an account’s password. Supported in Bravura Pass  and ▪
Bravura Privilege .
▪unexpirepw( const $info )  Unexpires an account’s password. Supported in Bravura Pass ▪
and Bravura Privilege .
▪expireacct( const $info )  Expires an account. Supported in Bravura Pass  and Bravura ▪
Privilege .
▪unexpireacct( const $info )  Unexpires an account. Supported in Bravura Pass  and ▪
Bravura Privilege .
▪create( const $info )  Creates a new account on the target system. This oper ation  creates ▪
the account (possibly using a template for some attribut e  values), then sets other attribut e  values –
including the password for the new account. Supported in Bravura Identity  and Bravura Privilege .
This function  should make use of the target system administrator cr edentials.
▪delete( const $info )  Deletes an e xisting  account on the target system. The typical behavior ▪
is to fir s t ensure that the account being deleted exists. Supported in Bravura Identity  and Bravura
Privilege .
You may also wish to include ins tructions  to delete any files or objects associated with the account.
▪verify( const $info )  Checks if a given password is the correct, current password for an ▪
account. If the applic ation  supports the concept of intruder lockout and the v erific ation  fails, the
intruder lockout counter is incremented. Supported in Bravura Identity  and Bravura Privilege .
▪admin_verify( const $info )  Checks if a given password is the correct, current password ▪
for an account without triggering an intruder lockout if the password is not correct. Supported in
Bravura Pass  and Bravura Privilege .
▪verifyreset( const $info )  V erifies  if the account’s password matches the new password, ▪
and if the v erific ation  fails, adminis tr ativ ely  sets it to the new password. If the v erific ation  succeeds,
then the reset is not necessary, and the oper ation  returns success. Supported in Bravura Pass  and
Bravura Privilege .
▪reset( const $info )  Adminis tr ativ ely  resets an account’s password to a new value. If the ▪
applic ation  supports the concept of intruder lockout, then the intruder lockout counter is cleared and
the account unlocked. If the applic ation  supports the concept of password expiry, then the expiry date
is set according to the expiry policy of the applic ation.  Disabled accounts will remain disabled.
Supported in Bravura Pass  and Bravura Privilege .
▪change( const $info )  Changes the password for an account, from a known current value to a ▪
desired new value. If the applic ation  supports the concept of intruder lockout, then the intruder
lockout counter is cleared and the account unlocked. If the applic ation  supports the concept ofpassword expiry, then the expiry date is set according to the expiry policy of the applic ation.
Supported in Bravura Pass  and Bravura Privilege .
▪resetexpirepw( const $info )  Adminis tr ativ ely  resets an account’s password to a new ▪
value and expires the account’s new password, so that the user is forced to change his password the
next time  he logs in. Supported in Bravura Pass  and Bravura Privilege .
▪groupuseradd( const $info )  Adds an account to a group. Supported in Bravura Identity ▪
and Bravura Privilege .
▪groupuserdelete( const $info )  Removes an account from a group. Supported in Bravura ▪
Identity  and Bravura Privilege .
▪groupgroupadd( const $info )  Adds a group to a group. Supported in Bravura Identity  and ▪
Bravura Privilege .
▪groupgroupdelete( const $info )  Removes a group from a group. Supported in Bravura ▪
Identity  and Bravura Privilege .
▪update( const $info )  Updates attribut es  for an e xisting  account. Supported in Bravura ▪
Identity  and Bravura Privilege .
▪userattributes( const $info )  Lists attribut es  for a specified  account. Supported in ▪
Bravura Identity  and Bravura Privilege .
All functions  are optional.  To indicate success your function  must return 0. To indicate failure your
function  must return 1.
WARNING! Functions  which reset or verify passwords in scripts used by Bravura
Privilege  for password r andomiz ation  must always report the result of the
reset or v erific ation  accurately. Inaccurate status in f ormation  may result
in checked out passwords not working; additionally ,  if the cr edential  used
to manage the target system is being randomized, Bravura Privilege  may
invalidate its own managed system cr edential  when an erroneous status
is returned. Do not assume scripted password changes are always
successful; always check return codes.
If your target does not support a particular  oper ation  (for example, if there is no intruder lockout
mechanism), then omit the corresponding function  from the script. If the agent cannot find a particular
function  in the script, the agent returns a message saying "Function  [<oper ation>]  not found in script".
The following additional  functions  (optional)  do not represent actual agent oper ations,  however they are
also called directly by the agent:
▪connecttarget( const $cinfo )  called before the fir s t oper ation  is performed. ▪
This function  must return 0 on success, or 1 on failure.
▪disconnecttarget( const $cinfo )  called after  the last oper ation  is performed. ▪
This function  must return 0 on success, or 1 on failure.
▪listmembermethod()  used to determine the supported method for listing  group membership on ▪
the target system.
If both methods are supported, select the method that is the most e fficien t.  This function  must return:
▪0 - if the script cannot list group membership ▪▪1 - if the script list accounts in a group while listing  groups ▪
▪2 - if the script lists groups while listing  accounts ▪
The calling program uses the result of listmembermethod , along with your t ar g e t -c on figur ation
settings,  to determine the value of $wantGroups  and $wantMembers .
For example, if the calling program is executed with the option  to list group membership, and the
result of listmembermethod is 1, the calling program executes the function:
   listgroups(1)
▪addressattrs ()  used to extend the address wizard by adding additional  address line elements. ▪
It is only possible to add new address line elements, not remove or change e xisting  ones. This is useful
when cr eating  a scripted target system with a scripted platform  de finition  file.
▪If not de fined,  the address wizard behaves as normal. ▪
▪From within this function  the addAddressElement callback function  adds a single address line ▪
element. The callback function  can be called multiple  times  and takes the following form:
addAddressElement(name, type, defaultValue, isRequired,
restrictedValuesList, description, advanced);
Where:
▪name: is the string name of the of the address line component.▪
▪type: is one of ($AddressTypeInt $AddressTypeString $AddressTypeBoolean▪
$AddressTypeKvgroup $AddressTypeRestricted $AddressTypeScript $AddressTypeDir
$AddressTypeFile).
▪defaultValue: string default value or empty if no default value.▪
▪isRequired: boolean, where 1=required and 0=optional. ▪
▪restrictedValuesList: array of display/actual values for each restricted value.▪
▪ description:  Textual description  of the element. ▪
▪advanced: boolean, 1=display attribut e  in advanced section  and 0=default ▪
An example is included in the sample agttelnet-racf.psl .
The following function  is available to agtssh:
▪ cr edentialo v erride(  inout $cinfo ) called before all other functions  and used to override the adminid ▪
and adminpw cr edentials  on the c onnection  to the SSH target.
▪The function  is optional,  and is not called if it is not de fined. ▪
▪The function  is called before all other functions. ▪
▪The adminid, adminpw, host, and address elements are readable in the function. ▪
▪The adminid and adminpw elements are settable  within the cr edentialo v erride  function  to other ▪
values. The return value for the function  does not a ff ect  the commitment of the override values -
agtssh always uses the returned values for adminid and adminpw for the c onnection.
▪The host, address, sysid, and syspw elements do not commit overridden values.▪
▪The adminid and adminpw elements are accessible via a tr ansitional  variable to other functions. ▪
▪The variable $COMMON_SHELL  can be set in the function  to specify a custom shell. ▪Input parameters ($cinfo and $info)
The c onnecttar g e t()  and disc onnecttar g e t()  functions  each take one parameter, an associativ e  array
($cinfo). Each element is a string. Elements of the array are:
▪address the target address. ▪
▪adminid the target system administrator’s ID. ▪
▪adminpw the target system administrator’s password. ▪
▪sysid the target system administrator’s ID if the Is this an additional  system password? checkbox is ▪
selected.
▪syspw the target system administrator’s password if the Is this an additional  system password? ▪
checkbox is selected.
Most of the functions  that relate to Bravura Security Fabric  oper ations  (for example, create(),
enable()reset(), change() ) also take one parameter, an associativ e  array ($info). Each element is a string
unless otherwise indicated. Elements of the array are:
▪userid the pr ofile  ID of the user. ▪
▪ shortid  the short ID of the user. ▪
▪fullname the full name of the user. ▪
▪ acctid  the ID for the account that the user has on this system. ▪
▪newpw the new password (for password reset and create oper ations). ▪
▪oldpw the old password (for verify oper ations). ▪
▪modeluid the template ID (for create oper ations). ▪
▪groupid the group ID (for group* oper ations). ▪
▪groupname the group description  (for group* oper ations). ▪
▪ attribut es  a KVGroup containing in f ormation  about attribut es  to set (for create and update ▪
oper ations)
The general format of the KVGroup is as follows:
"attributes" "" = {
  "DEFAULT-ACTION" = "COPY"
  "attribute" "givenName" = {
    "SEQUENCE" = "0"
    "GROUP"    = "0"
    "ACTION"   = "VALUE"
    "VALUE"    = "John"
   }
  "attribute" "sn" = {
    "SEQUENCE" = "0"
    "GROUP"    = "0"
    "ACTION"   = "VALUE"
    "VALUE"    = "Doe"
   }